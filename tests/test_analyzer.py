#!/usr/bin/env python3
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Peraton Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# pylint: disable=redefined-outer-name
# pylint: disable=protected-access

import unittest
from unittest import mock

import pytest

from a2p2v.analyzer import Analyzer
from a2p2v.types import Capability

from a2p2v.database import Database
from a2p2v.metasploitdb import MetasploitDB

# Capability: possible classes and subclasses
possible_classes = ['exploit', 'service']
possible_subclasses = [
    'remote_code_execution',
    'local_code_execution',
    'privilege_escalation',
]


class TestAnalyzer(unittest.TestCase):
    @mock.patch.object(Database, 'ready')
    @mock.patch.object(Analyzer, '_get_capabilities_from_database')
    def test_constructor(
        self,
        mock_get_capabilities_from_database,
        mock_capabilities_db_ready,
    ):
        '''Test the constructor by patching the database routines'''
        mock_capabilities_db_ready.return_value = True
        analyzer = Analyzer(
            execute=None, plan=None, datafile=None, netfile=None
        )
        mock_get_capabilities_from_database.assert_called()

    def test_capability(self):
        for capability_class in possible_classes:
            for capability_subclass in possible_subclasses:
                capability = Capability(
                    capability_id=1,
                    title='test1',
                    capability_class=capability_class,
                    subclass=capability_subclass,
                    severity='1',
                    cves=[],
                    cvss='',
                    preconditions=[],
                    actions=[],
                    postconditions=[],
                    rank='',
                    solution='',
                )

    # NOTE: the module that gets patches ends up falling underneath
    # the module being tested.  e.g. instead of patching "os.path" it is "a2p2v.analyzer.os.path"

    def test_get_config_options(self):
        # TODO:
        pass

    def test_run(self):
        # TODO
        pass

    @mock.patch.object(Analyzer, '_get_capabilities_from_database')
    @mock.patch('a2p2v.analyzer.open')
    def test_detect_plugin_type(
        self,
        mock_open,
        mock_get_capabilities_from_database,
    ):
        '''Test the constructor by patching the database routines'''
        analyzer = Analyzer(execute=None, plan=None, datafile='', netfile=None)
        analyzer._detect_plugin_type()
        mock_open.assert_called()
        self.assertEqual(analyzer.scan_plugin, 'unknown')

        # TODO: How to make mock_open return

    def test_parse_network_xml(self):
        # TODO
        pass

    def test_parse_common_csv(self):
        # TODO
        pass

    def test_get_capabilities_from_database(self):
        # TODO
        pass

    def test_get_capability_by_id(self):
        # TODO
        pass

    def test_add_capability(self):
        # TODO
        pass

    def test_get_service_capability_by_port(self):
        # TODO
        pass

    def test_parse_nmap_xml(self):
        # TODO
        pass

    def test_classify_vulnerability(self):
        # TODO
        pass

    def test_add_metasploit_capability(self):
        # TODO
        pass

    def test_parse_nessus_xml(self):
        # TODO
        pass

    def test_report_capabilities(self):
        # TODO
        pass

    def test_fix_metasploit_options(self):
        # TODO
        pass


IP_HOSTNAME = [
    ('172.16.1.1', 'GW'),
    ('192.168.30.1', 'GW'),
    ('192.168.30.102', 'USER1'),
    ('192.168.20.101', 'HMI'),
    ('192.168.30.101', 'HMI'),
    ('192.168.30.200', 'ATTACKER'),
    ('192.168.20.103', 'USER2'),
    ('192.168.10.103', 'USER2'),
    ('192.168.20.104', 'OPC'),
    ('192.168.10.104', 'OPC'),
    ('192.168.10.71', 'PLC'),
    ('unknown', 'UNKNOWN'),
]


@pytest.fixture
@mock.patch.object(Analyzer, '_get_capabilities_from_database')
def analyzer(mock_get_capabilities_from_database):
    '''Create an analyzer and populate it with some data'''
    analyzer = Analyzer(execute=None, plan=None, datafile=None, netfile=None)
    analyzer.host_capabilities = {
        'GW': {
            'interfaces': {('192.168.30.1', ''), ('172.16.1.1', '')},
            'capabilities': [],
        },
        'USER1': {'interfaces': {('192.168.30.102', '')}, 'capabilities': []},
        'HMI': {
            'interfaces': {('192.168.20.101', ''), ('192.168.30.101', '')},
            'capabilities': [],
        },
        'ATTACKER': {
            'interfaces': {('192.168.30.200', '')},
            'capabilities': [],
        },
        'USER2': {
            'interfaces': {('192.168.20.103', ''), ('192.168.10.103', '')},
            'capabilities': [],
        },
        'OPC': {
            'interfaces': {('192.168.20.104', ''), ('192.168.10.104', '')},
            'capabilities': [],
        },
        'PLC': {'interfaces': {('192.168.10.71', '')}, 'capabilities': []},
    }

    return analyzer


@pytest.mark.parametrize('ip_address, hostname', IP_HOSTNAME)
def test_ip_to_hostname(analyzer, ip_address, hostname):
    assert analyzer.ip_to_hostname(ip_address) == hostname


def test_add_capabilities_to_host(analyzer):
    # Create some testing capabilities
    capability1 = Capability(
        capability_id='test1',
        title='test case 1',
        capability_class='exploit',
        subclass='remote_code_execution',
        severity='4',
        cves=[],
        cvss='',
        preconditions=None,
        actions=None,
        postconditions=None,
        rank=None,
        solution=None,
    )
    capability2 = Capability(
        capability_id='test2',
        title='test case 2',
        capability_class='exploit',
        subclass='remote_code_execution',
        severity='4',
        cves=[],
        cvss='',
        preconditions=None,
        actions=None,
        postconditions=None,
        rank=None,
        solution=None,
    )

    capabilities = [capability1, capability2]

    for capability in capabilities:
        analyzer.capabilities[capability.capability_id] = capability

    capability_names = [
        capability.capability_id for capability in capabilities
    ]

    # Add the capabilities to the host
    analyzer._add_capabilities_to_host('192.168.20.101', capability_names)

    # Verify that the capabilities were added
    capability_ids = analyzer.host_capabilities['HMI']['capabilities']

    assert 'test1' in capability_ids
    assert 'test2' in capability_ids

    # Add another capability to the host, by using a different IP address
    capability3 = Capability(
        capability_id='test3',
        title='test case 3',
        capability_class='exploit',
        subclass='remote_code_execution',
        severity='4',
        cves=[],
        cvss='',
        preconditions=None,
        actions=None,
        postconditions=None,
        rank=None,
        solution=None,
    )

    analyzer.capabilities[capability3.capability_id] = capability3
    analyzer._add_capabilities_to_host(
        '192.168.30.101', [capability3.capability_id]
    )

    # Verify that the capabilities were added
    capability_ids = analyzer.host_capabilities['HMI']['capabilities']

    assert 'test1' in capability_ids
    assert 'test2' in capability_ids
    assert 'test3' in capability_ids
