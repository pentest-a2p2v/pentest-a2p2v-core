#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0
# See README.md for license details

from unittest import mock

from a2p2v.metasploitdb import MetasploitDB
from . import load_sample_data


def test_does_not_exist():
    assert MetasploitDB.get_name_by_module("DOESNOTEXIST") == None
    assert MetasploitDB.get_modules_by_cve_number("DOESNOTEXIST") == []
    assert MetasploitDB.get_options_by_module("DOESNOTEXIST") == {}
    assert MetasploitDB.get_options_by_name("DOESNOTEXIST") == {}
    assert MetasploitDB.get_cvelist_by_name("DOESNOTEXIST") == []


def test_get_info_by_module():
    info = MetasploitDB.get_info_by_module(
        "exploit/windows/smb/ms17_010_psexec"
    )

    assert info.rank == "normal"
    assert info.module_type == "exploit"
    assert info.module == "exploit/windows/smb/ms17_010_psexec"
    assert (
        info.name
        == "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution"
    )
    assert 'x86' in info.arch
    assert 'x64' in info.arch
    assert 'exploit' in info.module_type
    assert 'MS17-010' in info.description


def test_get_options_by_module():
    options = MetasploitDB.get_options_by_module(
        "exploit/multi/http/wp_ninja_forms_unauthenticated_file_upload"
    )
    assert options["FORM_PATH"] == "/index.php/king-of-hearts/"

    options = MetasploitDB.get_options_by_module(
        'exploit/windows/smb/ms17_010_eternalblue'
    )
    assert 'RPORT' in options.keys()

    options = MetasploitDB.get_options_by_module(
        'exploit/windows/smb/ms17_010_psexec'
    )
    assert 'RPORT' in options.keys()


def test_get_options_by_name():
    options = MetasploitDB.get_options_by_name(
        "WordPress Ninja Forms Unauthenticated File Upload"
    )
    assert options["FORM_PATH"] == "/index.php/king-of-hearts/"

    options = MetasploitDB.get_options_by_name(
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
    )
    assert 'RPORT' in options.keys()


def test_get_name_by_module():
    name = MetasploitDB.get_name_by_module(
        "exploit/multi/http/wp_ninja_forms_unauthenticated_file_upload"
    )

    assert name == "WordPress Ninja Forms Unauthenticated File Upload"

    assert (
        MetasploitDB.get_name_by_module(
            'exploit/windows/smb/ms17_010_eternalblue'
        )
        == 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'
    )


def test_get_module_by_name():
    module = MetasploitDB.get_module_by_name(
        "WordPress Ninja Forms Unauthenticated File Upload"
    )

    assert (
        module
        == "exploit/multi/http/wp_ninja_forms_unauthenticated_file_upload"
    )

    assert (
        MetasploitDB.get_module_by_name(
            'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'
        )
        == 'exploit/windows/smb/ms17_010_eternalblue'
    )


def test_get_modules_by_cve_number():
    module_list = MetasploitDB.get_modules_by_cve_number("CVE-2016-1209")

    assert (
        module_list[0]
        == "exploit/multi/http/wp_ninja_forms_unauthenticated_file_upload"
    )

    module_list = MetasploitDB.get_modules_by_cve_number('CVE-2017-0147')

    for module in [
        'exploit/windows/smb/ms17_010_eternalblue',
        'exploit/windows/smb/ms17_010_psexec',
    ]:
        assert module in module_list

    module_list = MetasploitDB.get_modules_by_cve_number('CVE-2019-0708')
    assert 'exploit/windows/rdp/cve_2019_0708_bluekeep_rce' in module_list


def test_get_cvelist_by_name():
    cve_list = MetasploitDB.get_cvelist_by_name(
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
    )
    assert "CVE-2017-0143" in cve_list


def test_trouble_names():
    module1 = MetasploitDB.get_module_by_name(
        " Microsoft IIS WebDav ScStoragePathFromUrl Overflow"
    )
    module2 = MetasploitDB.get_module_by_name(
        "Oracle Weblogic Server Deserialization RCE - AsyncResponseService "
    )

    assert module1 == "exploit/windows/iis/iis_webdav_scstoragepathfromurl"
    assert (
        module2
        == "exploit/multi/misc/weblogic_deserialize_asyncresponseservice"
    )


def test_get_user_cache_dir():
    pass


def test_get_user_config_dir():
    pass


def test_get_db_filename():
    pass


def test_load_data():
    pass


def test_load_broken_modules():
    pass


def test_sanitize():
    assert MetasploitDB.sanitize("'Testing123'") == "Testing123"
    assert MetasploitDB.sanitize('"Testing123"') == "Testing123"
    assert MetasploitDB.sanitize("   Testing123") == "Testing123"
    assert MetasploitDB.sanitize("Testing123    ") == "Testing123"


def test_load_details():
    pass


def test_load_data_from_file():
    pass


def test_get_names_by_cve_number():
    names = MetasploitDB.get_names_by_cve_number("CVE-2017-0143")

    assert (
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
        in names
    )
    assert (
        "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution"
        in names
    )


def test_get_related_modules_by_module():
    related_modules = MetasploitDB.get_related_modules_by_module(
        "exploit/windows/smb/ms17_010_eternalblue"
    )
    for module in [
        "exploit/windows/smb/ms17_010_eternalblue",
        "exploit/windows/smb/ms17_010_psexec",
    ]:
        assert module in related_modules


def test_get_related_modules_by_name():
    related_modules = MetasploitDB.get_related_modules_by_name(
        "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution"
    )
    for module in [
        "exploit/windows/smb/ms17_010_eternalblue",
        "exploit/windows/smb/ms17_010_psexec",
    ]:
        assert module in related_modules


def test_get_related_names_by_name():
    names = MetasploitDB.get_related_names_by_name(
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
    )
    assert (
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
        in names
    )
    assert (
        "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution"
        in names
    )


def test_get_related_names_by_cve():
    names = MetasploitDB.get_related_names_by_cve("CVE-2017-0143")
    assert (
        "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption"
        in names
    )
    assert (
        "MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution"
        in names
    )


@mock.patch.object(MetasploitDB, 'load_broken_modules')
@mock.patch.object(MetasploitDB, 'load_details')
@mock.patch("a2p2v.metasploitdb.os.path")
@mock.patch("a2p2v.metasploitdb.os")
def test_clean(
    mock_os, mock_path, mock_load_broken_modules, mock_load_details
):
    # If the file is not there, do not try to remove it
    mock_path.isfile.return_value = False
    MetasploitDB.clean()
    assert not mock_os.remove.called
    assert not mock_load_broken_modules.called
    assert not mock_load_details.called

    # If the file is there, remove it
    mock_path.isfile.return_value = True
    MetasploitDB.clean()
    assert mock_os.remove.called
    assert mock_load_broken_modules.called
    assert mock_load_details.called
