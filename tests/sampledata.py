#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0
# See README.md for license details

import configparser

from a2p2v.types import Capability


class NetworkGraph(dict):
    def __init__(self, nodes={}):
        self.nodes = nodes

    @classmethod
    def create_sample_graph(cls):

        network_graph = NetworkGraph()

        # Populate the dictionary
        network_graph['SW1'] = {
            'OPC-2': {'route': False},
            'USER2-2': {'route': False},
            'PLC-1': {'route': False},
        }
        network_graph['SW2'] = {
            'HMI-2': {'route': False},
            'OPC-1': {'route': False},
            'USER2-1': {'route': False},
        }
        network_graph['SW3'] = {
            'GW-2': {'route': False},
            'USER1-1': {'route': False},
            'HMI-1': {'route': False},
        }
        network_graph['HMI'] = {
            'HMI-1': {'route': False},
            'HMI-2': {'route': False},
        }
        network_graph['HMI-1'] = {
            'HMI': {'route': False},
            'SW3': {'route': False},
        }
        network_graph['HMI-2'] = {
            'HMI': {'route': False},
            'SW2': {'route': False},
        }
        network_graph['USER1'] = {'USER1-1': {'route': False}}
        network_graph['USER1-1'] = {
            'USER1': {'route': False},
            'SW3': {'route': False},
        }
        network_graph['USER2'] = {
            'USER2-1': {'route': False},
            'USER2-2': {'route': False},
        }
        network_graph['USER2-1'] = {
            'USER2': {'route': False},
            'SW2': {'route': False},
        }
        network_graph['USER2-2'] = {
            'USER2': {'route': False},
            'SW1': {'route': False},
        }
        network_graph['GW'] = {
            'GW-1': {'route': False},
            'GW-2': {'route': False},
        }
        network_graph['GW-1'] = {
            'GW': {'route': False},
            'EX_CLOUD': {'route': False},
        }
        network_graph['GW-2'] = {
            'GW': {'route': False},
            'SW3': {'route': False},
        }
        network_graph['EX_CLOUD'] = {
            'ATTACKER-1': {'route': False},
            'GW-1': {'route': False},
        }
        network_graph['ATTACKER'] = {'ATTACKER-1': {'route': False}}
        network_graph['ATTACKER-1'] = {
            'ATTACKER': {'route': False},
            'EX_CLOUD': {'route': False},
        }
        network_graph['OPC'] = {
            'OPC-1': {'route': False},
            'OPC-2': {'route': False},
        }
        network_graph['OPC-1'] = {
            'OPC': {'route': False},
            'SW2': {'route': False},
        }
        network_graph['OPC-2'] = {
            'OPC': {'route': False},
            'SW1': {'route': False},
        }
        network_graph['PLC'] = {'PLC-1': {'route': False}}
        network_graph['PLC-1'] = {
            'PLC': {'route': False},
            'SW1': {'route': False},
        }

        # Populate the nodes dictionary
        network_graph.nodes['SW1'] = {
            'node_id': 'SW1',
            'node_passive': True,
            'nodeType': 'switch',
        }
        network_graph.nodes['SW2'] = {
            'node_id': 'SW2',
            'node_passive': True,
            'nodeType': 'switch',
        }
        network_graph.nodes['SW3'] = {
            'node_id': 'SW3',
            'node_passive': True,
            'nodeType': 'switch',
        }
        network_graph.nodes['HMI'] = {
            'node_id': 'HMI',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['HMI-1'] = {
            'node_id': '192.168.30.101',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['HMI-2'] = {
            'node_id': '192.168.20.101',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['USER1'] = {
            'node_id': 'USER1',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['USER1-1'] = {
            'node_id': '192.168.30.102',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['USER2'] = {
            'node_id': 'USER2',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['USER2-1'] = {
            'node_id': '192.168.20.103',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['USER2-2'] = {
            'node_id': '192.168.10.103',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['GW'] = {
            'node_id': 'GW',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['GW-1'] = {
            'node_id': '172.16.1.1',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['GW-2'] = {
            'node_id': '192.168.30.1',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['EX_CLOUD'] = {
            'node_id': 'EX_CLOUD',
            'node_passive': True,
            'nodeType': 'switch',
        }
        network_graph.nodes['ATTACKER'] = {
            'node_id': 'ATTACKER',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['ATTACKER-1'] = {
            'node_id': '192.168.30.200',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['OPC'] = {
            'node_id': 'OPC',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['OPC-1'] = {
            'node_id': '192.168.20.104',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['OPC-2'] = {
            'node_id': '192.168.10.104',
            'node_passive': True,
            'nodeType': 'interface',
        }
        network_graph.nodes['PLC'] = {
            'node_id': 'PLC',
            'node_passive': False,
            'nodeType': 'host',
        }
        network_graph.nodes['PLC-1'] = {
            'node_id': '192.168.10.250',
            'node_passive': True,
            'nodeType': 'interface',
        }

        return network_graph


def get_hosts_db():
    hosts_db = {
        'HMI': {
            'interfaces': {('192.168.30.101', ''), ('192.168.20.101', '')},
            'capabilities': [
                'smb',
                'exploit/windows/smb/ms10_061_spoolss',
                'exploit/windows/smb/ms17_010_psexec',
                'rdp',
            ],
        },
        'USER1': {
            'interfaces': {('192.168.30.102', '')},
            'capabilities': [
                'rdp',
                'smb',
                'exploit/windows/smb/ms17_010_psexec',
            ],
        },
        'USER2': {
            'interfaces': {('192.168.10.103', ''), ('192.168.20.103', '')},
            'capabilities': [
                'rdp',
                'smb',
                'exploit/windows/smb/ms17_010_psexec',
            ],
        },
        'GW': {
            'interfaces': {('192.168.30.1', ''), ('172.16.1.1', '')},
            'capabilities': ['ssh'],
        },
        'ATTACKER': {
            'interfaces': {('192.168.30.200', '')},
            'capabilities': [],
        },
        'OPC': {
            'interfaces': {('192.168.20.104', ''), ('192.168.10.104', '')},
            'capabilities': [
                'rdp',
                'smb',
                'exploit/windows/smb/ms17_010_psexec',
            ],
        },
        'PLC': {
            'interfaces': {('192.168.10.250', '')},
            'capabilities': [
                'modbus',
                'modbus.write_register',
                'modbus.write_register.change_temp',
            ],
        },
    }

    return hosts_db


# Capabilities dictionary


def get_capabilities():
    capabilities = {
        'remote_code_execution': Capability(
            capability_id="remote_code_execution",
            title="remote_code_execution",
            capability_class="exploit",
            subclass="",
            severity="high",
            solution="",
            rank="",
            cves="",
            preconditions=[],
            actions=[],
            postconditions=[
                {
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'metasploit',
                },
                {
                    'type': 'state',
                    'key': 'current_host',
                    'value': '$target_host',
                },
                {'type': 'state', 'key': 'current_role', 'value': 'admin'},
            ],
            cvss=10,
        ),
        'privilege_escalation': Capability(
            capability_id="privilege_escalation",
            title="privilege_escalation",
            capability_class="exploit",
            subclass="",
            severity="high",
            solution="",
            rank="",
            cves="",
            preconditions=[
                {
                    'host': '$target_host',
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'shell',
                }
            ],
            actions=[],
            postconditions=[
                {'type': 'state', 'key': 'current_role', 'value': 'admin'}
            ],
            cvss=10,
        ),
        'smb': Capability(
            capability_id="smb",
            title="smb",
            capability_class="service",
            subclass="smb",
            severity="low",
            solution="Consider disabling or restricting access to file sharing on hosts",
            rank="normal",
            cves="",
            preconditions=[
                {
                    'host': '$current_host',
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'shell',
                },
                {
                    'host': '$target_host',
                    'type': 'credential',
                    'key': 'role',
                    'value': 'user',
                },
                {
                    'host': '$target_host',
                    'type': 'service',
                    'key': 'port',
                    'value': 'tcp/445',
                },
            ],
            actions=[
                {
                    'type': 'shell_command',
                    'key': 'SMB Client',
                    'value': 'smbclient -U $username -P $password //$target_host/C$',
                }
            ],
            postconditions=[],
            cvss=10,
        ),
        'rdp': Capability(
            capability_id="rdp",
            title="rdp",
            capability_class="service",
            subclass="rdp",
            severity="low",
            solution="Ensure secure passwords are used",
            rank="normal",
            cves="",
            preconditions=[
                {
                    'host': '$current_host',
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'shell',
                },
                {
                    'host': '$target_host',
                    'type': 'credential',
                    'key': 'role',
                    'value': 'user',
                },
                {
                    'host': '$target_host',
                    'type': 'service',
                    'key': 'port',
                    'value': 'tcp/3389',
                },
            ],
            actions=[
                {
                    'type': 'shell_command',
                    'key': 'Remote Desktop',
                    'value': 'rdesktop -u $username -p $password $target_host',
                }
            ],
            postconditions=[
                {'type': 'state', 'key': 'current_access', 'value': 'desktop'},
                {
                    'type': 'state',
                    'key': 'current_host',
                    'value': '$target_host',
                },
                {'type': 'state', 'key': 'current_role', 'value': '$role'},
            ],
            cvss=10,
        ),
        'ssh': Capability(
            capability_id="ssh",
            title="ssh",
            capability_class="service",
            subclass="ssh",
            severity="none",
            solution="Ensure secure passwords are used",
            rank="normal",
            cves="",
            preconditions=[
                {
                    'host': '$current_host',
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'shell',
                },
                {
                    'host': '$target_host',
                    'type': 'credential',
                    'key': 'role',
                    'value': 'user',
                },
                {
                    'host': '$target_host',
                    'type': 'service',
                    'key': 'port',
                    'value': 'tcp/22',
                },
            ],
            actions=[
                {
                    'type': 'metasploit',
                    'key': 'parameters',
                    'value': 'module=auxiliary/scanner/ssh/ssh_login rhosts=$target_host username=$username password=$password',
                }
            ],
            postconditions=[
                {'type': 'state', 'key': 'current_access', 'value': 'shell'},
                {
                    'type': 'state',
                    'key': 'current_host',
                    'value': '$target_host',
                },
                {'type': 'state', 'key': 'current_role', 'value': '$role'},
            ],
            cvss=10,
        ),
        'modbus': Capability(
            capability_id="modbus",
            title="modbus",
            capability_class="service",
            subclass="modbus",
            severity="high",
            solution="Restrict access to this sensitive, insecure service.",
            rank="excellent",
            cves="",
            preconditions=[
                {
                    'host': '$current_host',
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'shell',
                },
                {
                    'host': '$target_host',
                    'type': 'service',
                    'key': 'port',
                    'value': 'tcp/502',
                },
            ],
            actions=[
                {
                    'type': 'metasploit',
                    'key': 'parameters',
                    'value': 'module=auxiliary/scanner/scada/modbusclient rhost=$target_host action=$action data_address=$data_address data_registers=$data_registers unit_number=$unit_number',
                }
            ],
            postconditions=[],
            cvss=10,
        ),
        'modbus.write_register': Capability(
            capability_id="modbus.write_register",
            title="modbus",
            capability_class="service",
            subclass="modbus.write_register",
            severity="high",
            solution="Restrict access to this sensitive, insecure service.",
            rank="excellent",
            cves="",
            preconditions=[
                {
                    'host': '$target_host',
                    'type': 'capability',
                    'key': 'capability_id',
                    'value': 'modbus',
                }
            ],
            actions=[
                {
                    'type': 'capability',
                    'key': 'parameters',
                    'value': 'action=WRITE_REGISTERS',
                }
            ],
            postconditions=[],
            cvss=10,
        ),
        'modbus.write_register.change_temp': Capability(
            capability_id="modbus.write_register.change_temp",
            title="modbus",
            capability_class="service",
            subclass="modbus.write_register.change_temp",
            severity="high",
            solution="Restrict access to this sensitive, insecure service.",
            rank="excellent",
            cves="",
            preconditions=[
                {
                    'host': '$target_host',
                    'type': 'capability',
                    'key': 'capability_id',
                    'value': 'modbus.write_register',
                }
            ],
            actions=[
                {
                    'type': 'capability',
                    'key': 'parameters',
                    'value': 'data_address=2 data_registers=30 unit_number=255',
                }
            ],
            postconditions=[],
            cvss=10,
        ),
        'exploit/windows/smb/ms17_010_psexec': Capability(
            capability_id="exploit/windows/smb/ms17_010_psexec",
            title="MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution",
            capability_class="exploit",
            subclass="remote_code_execution",
            severity="high",
            solution="Apply Microsoft patches",
            rank="normal",
            cves="CVE-2017-0143,CVE-2017-0146,CVE-2017-0147",
            preconditions=[],
            actions=[
                {
                    'type': 'metasploit',
                    'key': 'remote_code_execution',
                    'value': 'module=exploit/windows/smb/ms17_010_psexec rhosts=$target_host lport=4444',
                }
            ],
            postconditions=[
                {
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'metasploit',
                },
                {
                    'type': 'state',
                    'key': 'current_host',
                    'value': '$target_host',
                },
                {'type': 'state', 'key': 'current_role', 'value': 'admin'},
            ],
            cvss=10,
        ),
        'exploit/windows/smb/ms10_061_spoolss': Capability(
            capability_id="exploit/windows/smb/ms10_061_spoolss",
            title="MS10-061 Microsoft Print Spooler Service Impersonation Vulnerability",
            capability_class="exploit",
            subclass="remote_code_execution",
            severity="high",
            solution="Microsoft has released a set of patches for Windows XP, 2003, Vista, 2008, 7, and 2008 R2.",
            rank="excellent",
            cves="CVE-2010-2729",
            preconditions=[],
            actions=[
                {
                    'type': 'metasploit',
                    'key': 'remote_code_execution',
                    'value': 'module=exploit/windows/smb/ms10_061_spoolss rhosts=$target_host',
                }
            ],
            postconditions=[
                {
                    'type': 'state',
                    'key': 'current_access',
                    'value': 'metasploit',
                },
                {
                    'type': 'state',
                    'key': 'current_host',
                    'value': '$target_host',
                },
                {'type': 'state', 'key': 'current_role', 'value': 'admin'},
            ],
            cvss=10,
        ),
    }

    return capabilities


def create_sample_config():
    # Create a configuration object
    config = configparser.ConfigParser()

    # Create the configuration sections
    for section in [
        'INPUT',
        'PLANNING',
        'INITIAL CONDITIONS',
        'GOALS',
        'SENSITIVE',
        'METASPLOIT',
    ]:
        config.add_section(section)

    # Populate the INPUT section
    config.set('INPUT', 'default_datafile', 'lab_config/simple.nessus')
    config.set('INPUT', 'default_netfile', 'lab_config/networkGraph.xml')

    # Populate the PLANNING sesction
    config.set(
        'PLANNING',
        'score_weights',
        '{"NUM_EXPLOITS":-0.5, "LENGTH":-0.5, "NUM_SERVICES":0.2, "SEVERITY":-0.2}',
    )

    # Populate the INITIAL CONDITIONS section
    config.set(
        'INITIAL CONDITIONS',
        'initial_condition1',
        '{"host":"attacker", "type":"state", "key":"initial_host", "value":"attacker"}',
    )
    config.set(
        'INITIAL CONDITIONS',
        'initial_condition2',
        '{"host":"attacker", "type":"state", "key":"current_role", "value":"admin"}',
    )
    config.set(
        'INITIAL CONDITIONS',
        'initial_condition3',
        '{"host":"attacker", "type":"state", "key":"current_access", "value":"metasploit"}',
    )
    config.set(
        'INITIAL CONDITIONS',
        'initial_condition4',
        '{"host":"gw", "type":"credential", "username":"username", "password":"password", "role":"user"}',
    )
    config.set(
        'INITIAL CONDITIONS',
        'initial_condition5',
        '{"host":"192.168.0.115", "type":"credential", "username":"testuser", "password":"welcome1", "role":"user"}',
    )

    # Populate the GOALS section
    config.set(
        'GOALS',
        'change_temperature',
        '{"type":"state", "key":"current_status", "value":"change_temp"}',
    )

    # Populate the SENSITIVE section
    config.set(
        'SENSITIVE',
        'sensitive1',
        '{"type":"state", "key":"current_host", "value":"OPC"}',
    )
    config.set(
        'SENSITIVE',
        'sensitive2',
        '{"type":"state", "key":"current_status", "value":"change_temp"}',
    )

    # Populate the METASPLOIT section
    config.set('METASPLOIT', 'host', '127.0.0.1')
    config.set('METASPLOIT', 'port', '55552')
    config.set('METASPLOIT', 'user', 'msf')
    config.set('METASPLOIT', 'password', 'welcome1')
    config.set('METASPLOIT', 'payload', 'example_payload')

    return config


initial_conditions = {
    'initial_condition1': '{"host":"attacker", "type":"state", "key":"initial_host", "value":"attacker"}',
    'initial_condition2': '{"host":"attacker", "type":"state", "key":"current_role", "value":"admin"}',
    'initial_condition3': '{"host":"attacker", "type":"state", "key":"current_access", "value":"metasploit"}',
    'initial_condition4': '{"host":"gw", "type":"credential", "username":"username", "password":"password", "role":"user"}',
    'initial_condition5': '{"host":"192.168.0.115", "type":"credential", "username":"testuser", "password":"welcome1", "role":"user"}',
}

goal_conditions = [
    {
        'id': 'goal_condition1',
        "type": "state",
        "key": "current_status",
        "value": "change_temp",
    },
]

sample_network_graph = NetworkGraph.create_sample_graph()
sample_hosts_db = get_hosts_db()
sample_config = create_sample_config()

if __name__ == '__main__':
    for capability_name in capabilities.keys():
        print(f'capability: {capability_name}')
