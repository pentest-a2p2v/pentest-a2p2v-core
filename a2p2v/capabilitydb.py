#!/usr/bin/python3
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright 2018-2023 Toshiba Corporation and Peraton Labs, Inc.
# See README.md for license details

""" This module is used to load attack database to memory.
"""

import logging
from .types import CapabilityRank, CapabilitySeverity, Capability
import yaml 
from .config import get_config_dir
import os 
import shutil
import glob 

logger = logging.getLogger(__name__)


# The name of capability file
CAPABILITY_FILENAME = '{0}.yml'

def capabilities_to_config(file_path, conf_path):
    """Copy capabilities file to config dir.

    Args:
        file_path (str): the path of capabilities file (e.g. lab_config/capabilities_user.yml)
        conf_path (str): the path of capabilities file in config dir (e.g. $HOME/.config/a2p2v/capabilities_user.yml)
    """
    if os.path.isfile(conf_path):
        user_response = input(
            'Warning: capabilities file already exists! Remove and reload (n/Y)?: '
        ).strip()
        if user_response not in ('y', 'Y', ''):
            return
        os.remove(conf_path)
        logger.debug('%s removed.', conf_path)
    
    shutil.copy(file_path, conf_path)

def get_file_name(path):
    """Get the filename of database file from the path
    
    Args:
        path (str): the path of file (e.g. lab_config/capabilities_user.yml)

    Returns:
        (str): the filename without extension of the database file (e.g. capabilities_user)
    """
    filename = path.split('/')[-1]
    lst_file_wo_extension = filename.split('.')
    file_wo_extension = ''
    for i in range(len(lst_file_wo_extension) - 1):
        file_wo_extension = file_wo_extension + lst_file_wo_extension[i]
    return file_wo_extension

def yml_capabilities_to_config(path):
    """Copy capabilities file to config dir

    Args:
        path (str): the path of capabilities file (e.g. lab_config/capabilities_user.yml)
    """
    config_dir = get_config_dir()
    file_name = get_file_name(path)
    file_path = os.path.join(config_dir, CAPABILITY_FILENAME.format(file_name))
    capabilities_to_config(path, file_path)
    
    

class Capabilitydb:
    def __init__(self):
        self.capabilities = {}
        self.capabilities_user = {}
        self.cve_dict = {}
        self._add_capabilities()
        self._get_cve_dict(self.capabilities, self.cve_dict)
        self._add_user_defined_capabilities()

    def _yml_capabilities_to_dict(self, filename):
        """Import capabilities from file

        Args:
            filename (str): the file of capabilities (e.g. $HOME/.config/a2p2v/capabilities_user.yml)

        Returns:
            (dict): the dictionary of capabilities
        """
        with open(filename, 'r') as stream:
            d = yaml.safe_load(stream)
        return d 
    
    def _add_capabilities(self):
        """Add capabilities to the dictionary
        """
        config_dir = get_config_dir()
        capabilities_path = config_dir + "/" + "*.yml"
        for yml_path in glob.glob(capabilities_path):
            yml_dict = self._yml_capabilities_to_dict(yml_path)
            self._add_capabilities_to_dict(yml_dict, self.capabilities)
        
    
    def _add_user_defined_capabilities(self):
        """Add user-defined capabilities to the dictionary
        """
        config_dir = get_config_dir()
        user_file = os.path.join(config_dir, CAPABILITY_FILENAME.format('capabilities_user'))
        user_yml_dict = self._yml_capabilities_to_dict(user_file)
        self._add_capabilities_to_dict(user_yml_dict, self.capabilities_user)
    
    def _add_capabilities_to_dict(self, yml_dict, capabilities_dict):
        """Add capability to a dictionary

        Args:
            yml_dict (dict): the dictionary of capability which is obtained from YML formatted file
            capabilities_dict (dict): the dictionary of Capability-formatted capability 
        """
        for capabilities_id in yml_dict.keys():
            capability = yml_dict[capabilities_id]
            if capabilities_id not in capabilities_dict.keys():
                new_capability = Capability(
                    capabilities_id,
                    capability['title'],
                    capability['capability_class'],
                    capability['subclass'],
                    capability['severity'],
                    capability['cves'],
                    capability['cvss'],
                    capability['preconditions'],
                    capability['actions'],
                    capability['postconditions'],
                    capability['rank'],
                    capability['solution'],
                )
                capabilities_dict[capabilities_id] = new_capability

    def _get_cve_dict(self, capabilities_dict, cve_dict):
        """generate cve and module or name mapping
        
        cve_dict = {'cve-id': [the list of module]}

        Args:
            capabilities_dict (dict): dictionary of capabilities
            cve_dict (dict): the mapping of cve-id and module name
        """
        for key in capabilities_dict:
            cves = capabilities_dict[key].cves.split(',')
            for cve in cves:
                if cve != '':
                    if cve not in cve_dict.keys():
                        cve_dict[cve] = []
                    cve_dict[cve].append(key)          
            
    def _get_name_by_module(self, module_name, capabilities_dict):
        """Given the fullname, get the human readable name
        e.g.
        In: 'exploit/windows/smb/ms17_010_eternalblue'
        Out: 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'

        Args:
            module_name (str): module name (fullname)
            capabilities_dict (dict): the dictionary of capabilities

        Returns:
            str: human-readable Metasploit name
        """
        return capabilities_dict[module_name].title
    
    def _get_module_by_name(self, name, capabilities_dict):
        """Given the human readable name, get the fullname
        e.g.
        In: 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'
        Out: 'exploit/windows/smb/ms17_010_eternalblue'
        Arguments:
            name (str): human-readable name
            capabilities_dict (str): the dictionary of capabilities
        Returns:
            str: module name (fullname)
        """
        module_list = [k for k, v in capabilities_dict.items() if v.title == name]
        if module_list != []:
            return module_list[0]
        else:
            return ''
    
    def _get_modules_by_cve_number(self, cve_number, cve_dict):
        '''Get a list of all module names related to a CVE
        e.g.:
        In: 'CVE-2017-0143'
        Out: ['exploit/windows/smb/doublepulsar_rce',
            'exploit/windows/smb/ms17_010_eternalblue',
            'exploit/windows/smb/ms17_010_psexec',
            'auxiliary/admin/smb/ms17_010_command',
            'auxiliary/scanner/smb/smb_ms17_010']
        Arguments:
            cve_number (str): CVE number
            cve_dict (dict): the dictionary of cve-id and modules
        Returns:
            List[str]: List of related module names
        '''
        if cve_number not in cve_dict:
            return []
        else:
            return cve_dict[cve_number]
    
    def _get_names_by_cve_number(self, cve_number, capabilities_dict, cve_dict):
        """Get a list of names associated with a CVE
        Arguments:
            cve_number (str): CVE number, e.g. CVE-2017-0143
            capabilities_dict (dict): the dictionary of capabilities
            cve_dict (dict): the dictionary of cve-id and modules
        Returns:
            List[str]: List of related module names, e.g.
            ['DOUBLEPULSAR Payload Execution and Neutralization',
            'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption',
            ...
            'MS17-010 SMB RCE Detection']
        """
        module_list = self._get_modules_by_cve_number(cve_number, cve_dict)
        name_list = [self._get_name_by_module(module, capabilities_dict) for module in module_list]
        return name_list 
    
    def _get_related_names_by_cve(self, cve, capabilities_dict, cve_dict):
        """Given a cve name, return all related names
        Arguments:
            cve (str): CVE, e.g. CVE-2017-0143
            capabilities_dict (dict): the dictionary of capabilities
            cve_dict (dict): the dictionary of cve-id and modules
        Returns:
            Set[str]: related names e.g.
            {
            'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption',
            'MS17-010 EternalRomance/EternalSynergy/EternalChampion...'
            }
        """
        related_names = set()
        for name in self._get_names_by_cve_number(cve, capabilities_dict, cve_dict):
            related_names.add(name)
        return related_names
    
    def _get_related_modules_by_name(self, name, capabilities_dict, cve_dict):
        '''Get a list of all module names related to a name
        e.g.
        In: 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption
        Out: {'exploit/windows/smb/ms17_010_eternalblue',
            'exploit/windows/smb/ms17_010_psexec'}
        Arguments:
            name (str): human-readable Metasploit name
            capabilities_dict (dict): the dictionary of capabilities
            cve_dict (dict): the dictionary of cve-id and modules
        Returns:
            Set[str]: Set of related module names
        '''
        module = self._get_module_by_name(name, capabilities_dict)
        related_modules = set()
        if module == '':
            return related_modules 
        else:
            cve_list = capabilities_dict[module].cves.split(',')
            for item in cve_list:
                if item != '':
                    for related_module in self._get_modules_by_cve_number(item, cve_dict):
                        related_modules.add(related_module)
            return related_modules 
    
    def _get_related_names_by_name(self, name, capabilities_dict, cve_dict):
        """Given a metasploit name, return all related names
        e.g.
        In: 'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption'
        Out:
        {
        'MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption',
        'MS17-010 EternalRomance/EternalSynergy/EternalChampion...'
        }
        Arguments:
            name (str): Human-readable Metasploit name
            capabilities_dict (dict): the dictionary of capabilities
            cve_dict (dict): the dictionary of cve-id and modules

        Returns:
            Set[str]: related names
        """
        module = self._get_module_by_name(name, capabilities_dict)
        related_names = set()
        if module == '':
            return related_names 
        else:
            cve_list = capabilities_dict[module].cves.split(',')
            for item in cve_list:
                if item != '':
                    for related_name in self._get_names_by_cve_number(item, capabilities_dict, cve_dict):
                        related_names.add(related_name)
            return related_name