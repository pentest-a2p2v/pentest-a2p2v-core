#!/usr/bin/python3
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Peraton Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

""" This module contains several enum types and named tuples for use
    in other modules.
"""
import collections
from enum import IntEnum
import logging

logger = logging.getLogger(__name__)


class CapabilityRank(IntEnum):
    """This class is used to assign numeric values to exploit module
    rankings as provided by Metasploit Currently '0' is used for disabled,
    banned and broken capabilities which should not be used.
    In system planning mode, the ranking is used to order hop options.
    Options utilizing capabilities with highest ranking are attempted first.
    The rank may also be used for scoring in future versions of the tool.
    Future versions of the tool may modify capability rank based on feedback
    from execution.
    """

    EXCELLENT = 10
    GREAT = 9
    GOOD = 8
    NORMAL = 7
    AVERAGE = 6
    LOW = 5
    MANUAL = 4
    UNKNOWN = 3
    DISABLED = 0
    BANNED = 0
    BROKEN = 0


class CapabilitySeverity(IntEnum):
    """The severity of capability based on the impact of an
    attacker using the capability"""

    HIGH = CRITICAL = 3
    MEDIUM = 2
    LOW = 1
    NONE = 0


class AccessClass(IntEnum):
    """Available levels of access of an attacker in the planning module"""

    NONE = 0
    WEB = 1
    SHELL = 2
    DESKTOP = 3
    METASPLOIT = 4


class UserRole(IntEnum):
    """Available levels of user role of an attacker in the planning module"""

    NONE = 0
    USER = 1
    ADMIN = 2


class FindMode(IntEnum):
    """Used to designate which iteration find_all_paths algorithm is in"""

    GOAL = 0
    ACCESS = 1


Capability = collections.namedtuple(
    'Capability',
    [
        'capability_id',  # unique id
        'title',  # human readable title
        'capability_class',  # 'exploit' or 'service'
        'subclass',  # (e.g. remote code execution)
        'severity',  # Severity level
        'cves',  # List of relevant CVEs
        'cvss',  # CVSS if applicable
        'preconditions',  # List of preconditions
        'actions',  # List of actions
        'postconditions',  # List of postconditions
        'rank',  # How reliable the capability is (can be from Metasploit info)
        'solution',  # Suggested solution / remediation
    ],
)


Credential = collections.namedtuple(
    'Credential',
    [
        'host',
        'role',
        'username',
        'password',
        'hash',
    ],
)
