#!/usr/bin/python3
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Peraton Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""The Visualizer module provides graphical depictions of the
provided target network and computed attack tree.  During execution
mode, it displays a visualization of the execution progress.
"""
import collections
import logging
import matplotlib as mpl
import matplotlib.pyplot as plt
import networkx as nx

logger = logging.getLogger(__name__)


class Visualizer:
    """The visualizer uses matplotlib to draw visualization.
    It draws the provided network graph, computed attack trees,
    and progress during execution.
    """

    def __init__(self, host_capabilities, network_graph):
        """Initialize the tool bar"""
        self.host_capabilities = host_capabilities
        self.network_graph = network_graph
        self.exec_graph = nx.Graph()
        self.exec_graph.add_node('ATTACKER')
        self.previous_node = 'ATTACKER'
        self.edge_labels = {}
        self.o_nodes = {
            "nodes": ['ATTACKER'],
            "sizes": [500],
            "colors": ['#33cc33'],
        }
        self.v_nodes = {"nodes": [], "sizes": [], "colors": []}
        mpl.rcParams['toolbar'] = 'None'
        self.fig = None

    def initialize_visuals(self):
        """Create a network graph and initialize components"""
        plt.ion()

        self.fig = plt.figure(figsize=(15, 15))

    def cleanup(self):
        """Close the display"""
        self.fig.clear()
        plt.close(self.fig)
        plt.ioff()

    def show_network_vis(self):
        """Display a visualization of the network graph"""
        logger.info("Rendering Network Graph...")
        (node_colors, node_sizes) = self._annotate_graph()
        self._draw_graph(
            self.network_graph,
            "Network Diagram Visualization",
            node_colors,
            node_sizes,
            '#ffdea2',
            1.0,
            draw_edge_labels=True,
        )

    def graph_advance(self, node=None, status=None, command=None):
        """Advance the graph during execution progress"""
        logger.debug(
            "Graph Advance Called.  Node=%s, Status=%s, Command=%s",
            node,
            status,
            command,
        )
        plt.clf()
        if node and not self.exec_graph.has_node(node):
            self.exec_graph.add_node(node)
            self.exec_graph.add_edge(self.previous_node, node, label=command)
            self.previous_node = node
            self.o_nodes["colors"].append('#66ccff')
            self.o_nodes["sizes"].append(500)
            self.o_nodes["nodes"].append(node)
        if status:
            if status == 1:  # Some initial access gained
                self.o_nodes["colors"].pop()
                self.o_nodes["colors"].append('#ffff00')
            if status == 2:  # Meterpreter session opened
                node = self.o_nodes['nodes'].pop()
                self.o_nodes['colors'].pop()
                self.o_nodes['sizes'].pop()
                self.v_nodes["nodes"].append(node)
                self.v_nodes["colors"].append('#ffbf00')
                self.v_nodes["sizes"].append(2000)
            # if status == 10: # Successful result on node
            #    self.o_nodes["colors"].append('#ff0000')
        if command:
            edge_key = (self.previous_node, node)
            if edge_key in self.edge_labels.keys():
                self.edge_labels[edge_key] += "\n{}".format(command)
            else:
                self.edge_labels[edge_key] = command

        pos = nx.circular_layout(self.exec_graph)

        nx.draw_networkx_nodes(
            self.exec_graph,
            pos,
            nodelist=self.o_nodes["nodes"],
            node_shape='o',
            node_color=self.o_nodes["colors"],
            node_size=self.o_nodes["sizes"],
        )
        nx.draw_networkx_nodes(
            self.exec_graph,
            pos,
            nodelist=self.v_nodes["nodes"],
            node_shape='*',
            node_color=self.v_nodes["colors"],
            node_size=self.v_nodes["sizes"],
        )
        nx.draw_networkx_labels(self.exec_graph, pos, font_size=10)
        nx.draw_networkx_edges(self.exec_graph, pos)

        self._draw_graph1(self.exec_graph, "Execution Progress Visualization")

    def show_attack_trees_vis(self, planner):
        """Display a graph of the attack trees"""
        logger.info("Rendering Composite Attack Model...")
        tree_list = planner.attack_trees
        if len(tree_list) == 0:
            logger.info("No trees to render")
            return

        node_colors = []
        node_sizes = []
        edge_weights = []

        label_mapping = {}
        edge_weight_mapping = collections.defaultdict(lambda: 0.5)

        graph = nx.Graph()

        start_node = planner.state.initial_host.upper()
        graph.add_node(start_node)
        node_colors.append('#33cc33')
        node_sizes.append(200)

        for tree in tree_list:
            previous_node = start_node
            tree_hops = tree['hops']
            for hop in tree_hops:
                node = hop['node']
                key = "{}:{}".format(previous_node, node)
                edge_weight_mapping[key] += 0.5
                previous_node = node

        for tree in tree_list:
            previous_node = start_node
            tree_hops = tree['hops']
            for hop in tree_hops:
                node = hop['node']
                if not graph.has_node(node):
                    graph.add_node(node)
                    capabilities = len(
                        self.host_capabilities[node]['capabilities']
                    )
                    label_mapping[node] = "{}\n({})".format(node, capabilities)
                    node_colors.append('#ff0000')
                    node_sizes.append(capabilities * 500)

                if not graph.has_edge(previous_node, node):
                    key = "{}:{}".format(previous_node, node)
                    graph.add_edge(
                        previous_node, node, label=edge_weight_mapping[key]
                    )
                    edge_weights.append(edge_weight_mapping[key])
                    logger.debug(
                        "Edge Start: %s, Edge End: %s", previous_node, node
                    )
                previous_node = node

        new_graph = nx.relabel_nodes(graph, label_mapping)

        self._draw_graph(
            new_graph,
            "Composite Attack Tree Visualization",
            node_colors,
            node_sizes,
            '#ff0000',
            edge_weights,
        )

    def _annotate_graph(self):
        """Add labels to the graph"""
        node_colors = []
        node_sizes = []
        label_mapping = {}

        for node in self.network_graph.nodes():
            if node == 'ATTACKER':
                node_colors.append('#33cc33')
                node_sizes.append(200)
                label_mapping[node] = node
            elif node in self.host_capabilities.keys():
                node_colors.append('#ff0000')
                capabilities = len(
                    self.host_capabilities[node]['capabilities']
                )
                node_sizes.append(capabilities * 500)
                label_mapping[node] = "{}\n({})".format(node, capabilities)
            else:
                node_sizes.append(200)
                node_colors.append('#66ccff')
                label_mapping[node] = node

        self.network_graph = nx.relabel_nodes(
            self.network_graph, label_mapping
        )

        return (node_colors, node_sizes)

    def _draw_graph(
        self,
        graph,
        title,
        node_colors,
        node_sizes,
        edge_colors,
        edge_weights,
        draw_edge_labels=True,
    ):
        options = {}

        if draw_edge_labels:
            options['with_labels'] = True

        pos = nx.networkx.kamada_kawai_layout(graph)
        nx.draw(
            graph,
            edge_color=edge_colors,
            width=edge_weights,
            node_color=node_colors,
            node_size=node_sizes,
            pos=pos,
            **options
        )

        self._draw_graph1(graph, title, show=True)

    @classmethod
    def _draw_graph1(cls, graph, title, show=False):
        pos = nx.networkx.kamada_kawai_layout(graph)
        edge_labels = nx.get_edge_attributes(graph, 'label')
        nx.draw_networkx_edge_labels(
            graph, pos, edge_labels=edge_labels, font_size=6
        )

        plt.axis('off')
        axis = plt.gca()
        plt.suptitle(title, fontsize=20)
        axis.collections[0].set_edgecolor("#555555")
        axis.set_xlim([1.2 * x for x in axis.get_xlim()])
        axis.set_ylim([1.2 * y for y in axis.get_ylim()])
        plt.tight_layout()

        if show:
            plt.show()
        else:
            plt.pause(0.05)
