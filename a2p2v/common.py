#!/usr/bin/env python3
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Peraton Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

""" This module is used to read configuration from the user home
    configuration directory (e.g. $HOME/.config/a2p2v/a2p2v.conf)
    A default configuration will be created if one does not exist,
    using the file data/a2p2v.conf
"""
try:
    import importlib.resources as pkg_resources
except ImportError:
    # Try backported to PY<37 `importlib_resources`.
    import importlib_resources as pkg_resources

import datetime
import json
import logging
import logging.config
import os

from .config import get_config_dir
from . import data  # relative-import the *package* containing the data file

# The name of the configuration file
LOGGING_CONFIG_FILENAME = 'logging.conf'
METASPLOIT_CONFIG_FILENAME = 'metasploit_config.json'

LOG_LEVELS = ['ERROR', 'WARNING', 'INFO', 'DEBUG']


def create_default_config(config_filename):
    """Create a default configuration file
    Arguments:
        config_filename (str): name of the configuration file
    """
    # Get the path to the output file
    config_dir = get_config_dir()
    config_output_filename = os.path.join(config_dir, config_filename)

    # Get the default configuration
    default_config = pkg_resources.read_text(data, config_filename)

    # Write the configuration to a file
    with open(config_output_filename, 'w') as configfile:
        for line in default_config.split('\n'):
            configfile.write(line)
            configfile.write('\n')


def create_default_metasploit_config():
    """Create a default Metasploit configuration file"""
    create_default_config(METASPLOIT_CONFIG_FILENAME)


def configure_logging():
    """Load the logging.conf configuration.
    If the file does not exist, create a default configuration.
    """
    config_dir = get_config_dir()
    config_filename = os.path.join(config_dir, LOGGING_CONFIG_FILENAME)

    if not os.path.isfile(config_filename):
        print('Creating default logging configuration')
        create_default_config(LOGGING_CONFIG_FILENAME)

    with open(config_filename, 'r') as config_file:
        config = json.load(config_file)
        logging.config.dictConfig(config)


def set_log_level(logger, log_level):
    """Set the log level
    The default log level is ERROR
    Args:
        logger: instance of the logging object
        log_level(int): Set the logging level (0=ERROR, 1=WARNING, 2=INFO, 3=DEBUG)
    """
    # Configure the logger
    if log_level > len(LOG_LEVELS) - 1:
        log_level = len(LOG_LEVELS) - 1
    elif log_level < 0:
        log_level = 0

    log_level_name = getattr(logging, LOG_LEVELS[log_level])

    logger.setLevel(log_level_name)


def get_file_timestamp() -> str:
    """Return a timestamp with no spaces
    Returns:
        str: the current timestamp in mdYHMS format
    """
    date_format = '%m%d%Y%H%M%S'
    return datetime.datetime.strftime(datetime.datetime.now(), date_format)


def get_report_timestamp() -> str:
    """Return a timestamp that is human readable
    Returns:
        str: the current timestamp in m/d/Y H:M format
    """
    date_format = '%m/%d/%Y %H:%M'
    return datetime.datetime.strftime(datetime.datetime.now(), date_format)
